const{app:app,session:session,BrowserWindow:BrowserWindow,Menu:Menu,dialog:dialog}=require("electron"),os=require("os"),path=require("path"),fs=require("fs"),fsp=require("fs").promises,electron=require("electron"),{ipcMain:ipcMain}=require("electron"),AWS=require("aws-sdk"),fse=require("fs-extra"),appName=app.getName();var bucket="";process.env.AWS_ACCESS_KEY_ID="",process.env.AWS_SECRET_ACCESS_KEY="";var s3=new AWS.S3;const env=process.env.NODE_ENV||"production";"development"===env&&require("electron-reload")(__dirname,{electron:require(__dirname+"/../node_modules/electron")});const isMac="darwin"===process.platform,template=[...isMac?[{label:app.name,submenu:[{role:"hide"},{role:"hideothers"},{role:"unhide"},{type:"separator"},{role:"quit"}]}]:[],{label:"File",submenu:[{role:"quit"}]},{label:"Edit",submenu:[{role:"undo"},{role:"redo"},{type:"separator"},{role:"cut"},{role:"copy"},{role:"paste"}]},{label:"Window",submenu:[{role:"minimize"},{role:"zoom"},...isMac?[{type:"separator"},{role:"front"},{type:"separator"},{role:"window"}]:[{role:"close"}]]}];if("production"===env){const e=Menu.buildFromTemplate(template);Menu.setApplicationMenu(e)}function createWindow(){const e=new BrowserWindow({width:1200,height:800,webPreferences:{worldSafeExecuteJavaScript:!0,preload:path.join(__dirname,"preload.js"),nodeIntegration:!1,contextIsolation:!0,webSecurity:!0}});async function t(e){return s3=new AWS.S3,await s3.listObjectsV2(e).promise().then(e=>e.Contents.map((function(e){return e.Key}))).catch((function(e){return"error"}))}async function a(e,t,a){var s={Bucket:bucket,Key:"meta/"+e+".json"},r=(await s3.getObject(s).promise()).Body.toString("utf-8"),o=JSON.parse(r);o[t]=a;var n=JSON.stringify(o);const i={Bucket:bucket,Key:"meta/"+e+".json",Body:n,StorageClass:"STANDARD"};return await s3.upload(i).promise().then(e=>"Metadata for key "+t+" updated to value "+a+" successfully.").catch(e=>(console.log(e,e.stack),"Metadata for "+t+" not updated successfully."))}ipcMain.handle("configureaws",async(e,a)=>{bucket=a.bucket,AWS.config.accessKeyId=a.accessKey,process.env.AWS_ACCESS_KEY_ID=a.accessKey,AWS.config.secretAccessKey=a.secretKey,process.env.AWS_SECRET_ACCESS_KEY=a.secretKey;var s=new AWS.Credentials({accessKeyId:a.accessKey,secretAccessKey:a.secretKey,sessionToken:null});AWS.config.credentials=s;var r={Bucket:bucket,MaxKeys:1};return await t(r)}),ipcMain.handle("selectdirectory",async(t,a)=>await dialog.showOpenDialog(e,{properties:["openDirectory"]}).then(e=>e.filePaths).catch(e=>{console.log(e)})),ipcMain.handle("listdirectory",async(e,t)=>{var a=[];!function e(t){fs.readdirSync(t).forEach(s=>{const r=path.join(t,s);return fs.statSync(r).isDirectory()?e(r):a.push(r)})}(t);var s=[];return a.forEach(e=>{s.push(e.replace(t+"/",""))}),s}),ipcMain.handle("senddata",async(e,t)=>{var a=t.file,s=t.path.concat("/",a),r=fs.readFileSync(s),o=t.dataid+"/"+a;const n={Bucket:bucket,Key:o,Body:r,StorageClass:t.storage};return await s3.upload(n).promise().then(e=>"File upload successful.").catch(e=>(console.log(e,e.stack),"File upload error."))}),ipcMain.handle("sendmetadata",async(e,t)=>{const a=JSON.stringify(t),s={Bucket:bucket,Key:"meta/"+t.dataid+".json",Body:a,StorageClass:"STANDARD"};return await s3.upload(s).promise().then(e=>"Metadata upload successful.").catch(e=>(console.log(e,e.stack),"Metadata upload error."))}),ipcMain.handle("getmetadata",async(e,a)=>{var s={Bucket:bucket,Prefix:"meta/",MaxKeys:1e6};const r=await t(s);for(var o=[],n={Bucket:bucket,Key:""},i=0;i<=r.length-1;i++){n.Key=r[i];var c=(await s3.getObject(n).promise()).Body.toString("utf-8");o.push(JSON.parse(c))}return o}),ipcMain.handle("listkeys",async(e,t)=>{var a={Bucket:bucket,Prefix:t.dataid,MaxKeys:1e6},s=await s3.listObjectsV2(a).promise(),r=[];return s.Contents.forEach((e,t)=>{r.push(e.Key)}),r}),ipcMain.handle("updatemeta",async(e,t)=>{var a={Bucket:bucket,Key:"meta/"+t.dataid+".json"},s=(await s3.getObject(a).promise()).Body.toString("utf-8"),r=JSON.parse(s);r[t.key]=t.val;var o=JSON.stringify(r);const n={Bucket:bucket,Key:"meta/"+t.dataid+".json",Body:o,StorageClass:"STANDARD"};return await s3.upload(n).promise().then(e=>"Metadata for key "+t.key+" updated to value "+t.val+" successfully.").catch(e=>(console.log(e,e.stack),"Metadata for "+t.key+" not updated successfully."))}),ipcMain.handle("restoredata",async(e,s)=>{var r={status:s.status,statusnotification:""},o={Bucket:bucket,Prefix:s.dataid,MaxKeys:1e6};const n=await t(o);switch(s.status){case"archived":for(var i=0;i<n.length;i++){var c={Bucket:bucket,Key:n[i],RestoreRequest:{Days:3,GlacierJobParameters:{Tier:"Standard"}}};await s3.restoreObject(c).promise()}await a(s.dataid,"status","restoring"),r.status="restoring",r.statusnotification="Data is now being restored for download.";break;case"restoring":var d=[],u=!0,l=!1;for(i=0;i<n.length;i++){var p={Bucket:bucket,Key:n[i]},h=await s3.headObject(p).promise();if(d.push({Key:n[i],Restore:h.Restore}),void 0===h.Restore){l=!0;break}if(h.Restore.includes("true")){u=!1;break}h.Restore.includes("false")}!0===l?(await a(s.dataid,"status","archived"),r.status="archived",r.statusnotification="Data was restored but expired. It is back in the archive and can be restored again."):!0===u?(await a(s.dataid,"status","restored"),r.status="restored",r.statusnotification="Data has been restored and is available for download."):!1===u&&(r.statusnotification="Data restoration is still in progress. The process will complete about 12 hours after it was started.");break;case"restored":case"archiving":d=[];var y=!0,f=0;for(i=0;i<n.length;i++)p={Bucket:bucket,Key:n[i]},h=await s3.headObject(p).promise(),d.push({Key:n[i],Restore:h.Restore}),void 0===h.Restore?y=!1:h.Restore.includes("false")&&(f+=1);if(!0===y){var w=d[d.length-1].Restore.split(",")[2].replace('"',"");r.statusnotification="Restored data is currently available for download. Data will return to Archived status on or around "+w+"."}else!1===y&&0===f?(await a(s.dataid,"status","archived"),r.status="archived",r.statusnotification="Data has returned to Archived status."):!1===y&&f>0&&(await a(s.dataid,"status","archiving"),r.status="archiving",r.statusnotification="Data is in the process of returning to Archived status. When this process completes data can be restored again.");break;default:console.log("There was an error and data status does not match any case in switch.")}return r}),ipcMain.handle("getdata",async(e,t)=>{for(var a=t.key.split("/"),s=a[a.length-1],r=a.length-1,o="",n=0;n<=r;n++){var i=a[n];if(i===s)break;fs.existsSync(t.downloadpath+"/"+o+i)||fs.mkdirSync(t.downloadpath+"/"+o+i),o=o+i+"/"}var c=await s3.getObject({Bucket:bucket,Key:t.key}).createReadStream(),d=await fs.createWriteStream(t.downloadpath+"/"+o+s);return c.pipe(d),null}),"development"===env?e.loadURL("http://localhost:3000"):e.loadURL("file://"+path.join(__dirname,"../build/index.html")),"development"===env&&e.webContents.openDevTools()}app.whenReady().then(()=>{createWindow(),app.on("activate",(function(){0===BrowserWindow.getAllWindows().length&&createWindow()}))}),app.on("window-all-closed",(function(){app.quit()}));